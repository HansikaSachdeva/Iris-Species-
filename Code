import pandas as pd
import numpy as np

from sklearn.datasets import load_iris
iris_dataset = load_iris()

print("Keys of iris_dataset: \n{}".format(iris_dataset.keys()))

#val = iris_dataset['DESCR']
#start_val = val[:200]
#print(start_val + "\n...")
#these three lines are same as the next line
print(iris_dataset['DESCR'][:193] + "\n...")

print("Target names: {}".format(iris_dataset['target_names']))

#the 4 column names
print("Feature names: \n{}".format(iris_dataset['feature_names']))

print("Type of data: {}".format(type(iris_dataset['data'])))

#150 rows, 4 columns
print("Shape of data: {}".format(iris_dataset['data'].shape))

print("First five rows of data:\n{}".format(iris_dataset['data'][:5]))

print("Type of target: {}".format(type(iris_dataset['target'])))

print("Shape of target: {}".format(iris_dataset['target'].shape))

#0-setosa
#1-versicolor
#2-virginica
print("Target:\n{}".format(iris_dataset['target']))

#This is the train test split
#X represents the attributes (lengths and widths)
#y represents the labels (3 types of flowers)
#random_state=0 ensures the rows are arranged properly
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(
    iris_dataset['data'], iris_dataset['target'], random_state=0)

print("X_train shape: {}".format(X_train.shape))
print("y_train shape: {}".format(y_train.shape))
print("X_test shape: {}".format(X_test.shape))
print("y_test shape: {}".format(y_test.shape))

#k nearest neighbors ML model
#k=1
from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier(n_neighbors=1)

#training the model
knn.fit(X_train, y_train)

#Making predictions
#Output- no of sample(1) into the no of features(4)
X_new = np.array([[5, 2.9, 1, 0.2]])      #features or attributes
print("X_new.shape: {}".format(X_new.shape))

prediction = knn.predict(X_new)
print("Prediction: {}".format(prediction))
print("Predicted target name: {}".format(
    iris_dataset['target_names'][prediction]))

y_pred = knn.predict(X_test)
print("Test set predictions:\n {}".format(y_pred))

print("Test set score: {}".format(np.mean(y_pred == y_test)))
